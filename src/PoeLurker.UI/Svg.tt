<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Globalization" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Xml.Linq" #>
<#@ Import Namespace="System.Diagnostics" #>
<#
    var targetNamespace = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");
    string folderPath = this.Host.ResolvePath("SVG");
    var icons = new IconConverter(folderPath).GetPackIconData();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace <#= targetNamespace #>
{
    using System.Windows;
    using System.Windows.Controls;

    /// <summary>
    /// Represents the icon pack data.
    /// </summary>
    public static class IconPackData
    {
	    #region Properties
<#foreach (var icon in icons)
{#>

        /// <summary>
        /// Gets the icon pack data for the icon <#=icon.Name#>.
        /// </summary>
        public static string <#=icon.Name#> => "<#=icon.Data#>";
<#}#>

	    #endregion
    }

    /// <summary>
    /// Represents the icon pack control.
    /// </summary>
    public class IconPack : Control
    {
        #region Fields

        /// <summary>
        /// The data property that contains the icon pack data.
        /// </summary>
        public static readonly DependencyProperty DataProperty =
            DependencyProperty.Register(nameof(Data), typeof(string), typeof(IconPack));

        #endregion

        #region Constructors

		/// <summary>
        /// Initializes the <see cref="IconPack"/> class.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline", Justification = "Reviewed.")]
        static IconPack()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(IconPack), new FrameworkPropertyMetadata(typeof(IconPack)));
        }

        #endregion

        #region Properties

		/// <summary>
        /// Gets or sets the icon pack data.
        /// </summary>
        public string Data
        {
            get
            {
                return this.GetValue(DataProperty).ToString();
            }

            set
            {
                this.SetValue(DataProperty, value);
            }
        }

        #endregion
    }
}
<#+
public class IconConverter
{
    #region Fields

    private string _folderPath;

    #endregion

    #region Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="IconConverter"/> class.
    /// </summary>
    /// <param name="folderPath">The folder path.</param>
    public IconConverter(string folderPath)
    {
        this._folderPath = folderPath;
    }

    #endregion

    #region Methods

    public IList<PackIconData> GetPackIconData()
    {
        var svgFiles = new List<string>();
        GetSVGFiles(this._folderPath, svgFiles);

        return GeneratePackIconData(svgFiles);
    }

    /// <summary>
    /// Gets the SVG files.
    /// </summary>
    /// <param name="folderPath">The folder path.</param>
    /// <param name="svgFiles">The SVG files.</param>
    private static void GetSVGFiles(string folderPath, List<string> svgFiles)
    {
        var files = Directory.GetFiles(folderPath);
        foreach (string fileName in files)
        {
            var extension = Path.GetExtension(fileName).ToUpper(CultureInfo.InvariantCulture);
            if (extension != ".SVG")
            {
                continue;
            }

            svgFiles.Add(fileName);
        }

        string[] subFolders = Directory.GetDirectories(folderPath);
        foreach (var suFolder in subFolders)
        {
            GetSVGFiles(suFolder, svgFiles);
        }
    }

    /// <summary>
    /// Generates the pack icon data.
    /// </summary>
    /// <param name="svgFiles">The SVG files.</param>
    /// <returns>The list of PackIconData</returns>
    private static IList<PackIconData> GeneratePackIconData(IList<string> svgFiles)
    {
        var iconDataList = new List<PackIconData>();
        foreach (var fileName in svgFiles)
        {
            var svgData = File.ReadAllText(fileName);
            var xmlDoc = XDocument.Parse(svgData);
            var name = Path.GetFileNameWithoutExtension(fileName).Replace("-", string.Empty);

            var paths = xmlDoc.Root.Descendants("{http://www.w3.org/2000/svg}path");
            if (paths.Count() != 1)
            {
                Console.WriteLine("Invalid path data in " + name);
                continue;
            }

            var data = (string)paths.First().Attribute("d");
            if (data == null)
            {
                Console.WriteLine("No path for " + name);
            }

            iconDataList.Add(new PackIconData()
            {
                Name = name,
                Description = name,
                Data = data
            });
        }

        return iconDataList;
    }

    #endregion
}

public class PackIconData
{
    #region Properties

    /// <summary>
    /// Gets or sets the name.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Gets or sets the description.
    /// </summary>
    public string Description { get; set; }

    /// <summary>
    /// Gets or sets the data.
    /// </summary>
    public string Data { get; set; }

    #endregion
}#>